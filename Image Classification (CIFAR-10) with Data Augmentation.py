from tensorflow.keras.datasets import cifar10

(features_train, label_train), (features_test, label_test) = cifar10.load_data()

batch_size = 16
img_height = 32
img_width = 32

from tensorflow.keras.preprocessing.image import ImageDataGenerator
train_img_gen = ImageDataGenerator(
    rescale = 1./255,
    width_shift_range = 0.1,
    height_shift_range = 0.1,
    horizontal_flip = True)

val_img_gen = ImageDataGenerator(rescale=1./255)

train_data_gen = train_img_gen.flow(
    features_train,
    label_train,
    batch_size = batch_size)

val_data_gen = train_img_gen.flow(
    features_test,
    label_test,
    batch_size = batch_size)


import numpy as np
import tensorflow as tf
from tensorflow.keras import layers

np.random.seed(8)
tf.random.set_seed(8)

from keras.api._v2.keras import activations
model = tf.keras.Sequential()
model.add(layers.Conv2D(64, 3, activation='relu', input_shape=(img_height, img_width, 3)))
model.add(layers.MaxPooling2D())
model.add(layers.Conv2D(128, 3, activation='relu'))
model.add(layers.MaxPooling2D())
model.add(layers.Flatten())
model.add(layers.Dense(128, activation='relu'))
model.add(layers.Dense(10, activation='softmax'))

model.summary()

optimizer = tf.keras.optimizers.Adam(0.001)

model.compile(loss='sparse_categorical_crossentropy', optimizer=optimizer, metrics=['accuracy'])

model.fit_generator(
    train_data_gen,
    steps_per_epoch=len(features_train) // batch_size,
    epochs=5,
    validation_data=val_data_gen,
    validation_steps=len(features_test) // batch_size
)

# Write a code to print the shape of features_train, label_train, features_test,
# and label_test and explain the output.

print("shape of features_train:", features_train.shape)
print("shape of label_train:", label_train.shape)
print("shape of features_test:", features_test.shape)
print("shape of label_test:", label_test.shape)

"In the output:
features_train is a numpy array of shape (50000, 32, 32, 3). This means that it contains 50000 images, each of size 
32x32 pixels, and with 3 color channels (RGB). label_train is a numpy array of shape (50000, 1). This means that it contains 
50000 labels, one for each image in features_train. features_test is a numpy array of shape (10000, 32, 32, 3). This means 
that it contains 10000 images, each of size 32x32 pixels, and with 3 color channels (RGB). label_test is a numpy array of 
shape (10000, 1). This means that it contains 10000 labels, one for each image in features_test."

# Explain the output generated by the model.fit_generator.
" The model.fit_generator() function is used to train a neural network using data generators created from the training and 
validation sets. Here's what the output generated by model.fit_generator() means:
The output shows the progress of each epoch during training. It shows the current epoch number, the total number of 
epochs, the number of steps taken in the current epoch, and the total number of steps in the epoch. For example, 
"Epoch 1/5, 3125/3125" means that we are in the first epoch out of 5, and we have taken 3125 steps out of a total of 
3125 steps in the epoch. The output also shows the loss and accuracy of the model on the training set for the current epoch. 
For example, "loss: 2.3029 - accuracy: 0.1002" means that the current loss on the training set is 2.3029 and the current 
accuracy is 0.1002. The output also shows the loss and accuracy of the model on the validation set for the current epoch. 
For example, "val_loss: 2.3028 - val_accuracy: 0.0858" means that the current loss on the validation set is 2.3028 and the 
current accuracy is 0.0858. The output continues for each epoch until all epochs are completed. " 

# Modify the ImageDataGenerator function by adding vertical_flip, shear_range,
# rotation_range and brightness_range and fit the model with the same network
# design. Compare the result with the first model.

train_datagen = ImageDataGenerator(
    rescale=1./255,
    vertical_flip=True,
    shear_range=0.2,
    rotation_range=20,
    brightness_range=[0.2, 1.0]
)

test_datagen = ImageDataGenerator(rescale=1./255)

train_generator = train_datagen.flow(
    features_train,
    label_train,
    batch_size=32
)

test_generator = test_datagen.flow(
    features_test,
    label_test,
    batch_size=32
)

# train the model with the new data generators
history = model.fit_generator(
    train_generator,
    steps_per_epoch=len(features_train) / 32,
    epochs=5,
    validation_data=test_generator,
    validation_steps=len(features_test) / 32
)

